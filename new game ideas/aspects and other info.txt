FAMILIARS/ASPECTS/DJINNS/ESPERS/WHATEVER

-they will level as you do
-they will have passive abilities, and gain an active ability at level 5
-they give stats
-passive auras will not stack

------------------------------------------------------------------------
TORTE (CD: 40 sec)
------------------------------------------------------------------------
-Additional strength and armor is something that any tank can appreciate.  Bubble Guard can also work very nicely on evasive heroes that can keep it up longer and regenerate more HP.
------------------------------------------------------------------------
+(3 + level) strength

passive (turtle shell): grants (level) armor to nearby allies

active (Bubble Guard): Surround nearby allies in a bubble for 15 seconds.  Allies within a bubble gain (2*level) hp/sec.  If an ally within a bubble gets hit, the damage is negated, and the bubble pops, ending the buff early.

------------------------------------------------------------------------
HEX (CD: 120 sec)
------------------------------------------------------------------------
-Although Hex's great intelligence boost and mana regen can easily support any magic user, it also makes for a strong counter pick to high crit-rate heroes like Dragoon.  Cursed Idol can be devastating with good timing and positioning!
------------------------------------------------------------------------
+(3 + level) intelligence

passive (Attrition) - When an enemy critically hits you, they are cursed for 1 second.  Cursed heroes cannot attack.

active (Cursed Idol): For 3 seconds, all nearby enemy heroes are cursed.  You regain (3*level)% of your maximum mana per second during the duration.

------------------------------------------------------------------------
JOLT (CD: 40 sec)
------------------------------------------------------------------------
-helps single target heroes spread their damage, useful for heroes like cloak that do a lot of damage to one target.
------------------------------------------------------------------------
+(3 + level) agility

passive (chain lightning): successful hits fire a jolt that hits the target and up to 2 nearby enemies for (3*level)% of the damage done

active (divine wrath): your next 5 successful hits summon a bolt of lightning on all enemy heroes, dealing (3*level)% of the damage done

------------------------------------------------------------------------
GILD (CD: 60 sec)
------------------------------------------------------------------------
-good for heavily item dependant heroes, useful as a way for them to help the whole team early on while helping themselves.
------------------------------------------------------------------------
+(1 + level/3) to all stats

passive (Common Wealth): nearby allied heroes gain (level*2)% of the money earned by other heroes within the aura

active (plunder): your next 5 attacks reward you with (level)% of the damage done in gold

------------------------------------------------------------------------
ORB (CD: 30 sec)
------------------------------------------------------------------------
-As a melee hero, the aura can give enemy heroes a hard time getting away, while as a ranged hero, the aura can deter enemy heroes from approaching.  Use Reverse polarity to initiate, or to pull an enemy just close enough to finish them off!
------------------------------------------------------------------------
+(2 + level/2) strength/intelligence

passive (repulsion aura): nearby enemy heroes are slowed the closer that they are to you, up to (level*3)%

active (reverse polarity): all enemy heroes are pulled towards you.  Your repulsion aura's effectiveness is doubled for 3 seconds.
------------------------------------------------------------------------
JACK (CD: 80 sec)
------------------------------------------------------------------------
-Choose Jack with a dream equipment setup in mind.  He is only useful if you know exactly what activated items you will be using, and they benefit from being used often.  Make sure you have enough mana and heat to use mischief effectively!
------------------------------------------------------------------------
+(2 + level/2) intelligence/agility

passive (quick fingers): your activated item cooldowns are 40% shorter.

active (Mischief): for the next 4 seconds, your activated items have no cooldown.  Each time you use an item, the heat/mana cost of all items is doubled for this duration.

------------------------------------------------------------------------
AGNI (CD: 1/3 sec)
------------------------------------------------------------------------
-Since heat stroke does percentage damage, playing as a tanky hero won't always be the best way to utilize heat wave.  Instead, consider playing a highly evasive hero with low HP, and kite your enemy while they slowly melt away!
------------------------------------------------------------------------
+(2 + level/2) strength/agility

passive (heat stroke): once every 0.75 seconds, a random nearby enemy unit loses (level)% of their max health

active (heat wave): when toggled on, heat stroke will instead cause ALL nearby enemy units to lose (level/2)% of their max health every 0.75 seconds. You will also take this damage.




CUSTOMIZEABLE COMPONENTS OF YOUR CHARACTER

pre-game:

HERO (who you are):
-determines the weapon types available to you
-determines your HP/MP/HT amounts and gain per level
-provides a large passive/compulsory ability that is the overarching theme of your character
-may also provide a secondary passive ability that further shapes your character's strengths

ASPECT (how you progress):
-provides your character with abilities that increase in potency as you level.  these include the following...
 +a passive stat gain per level
 +a passive ability that enhances each level
 +an activated ability that becomes available at level 5, and also enhances each level

in-game:

WEAPONS/ITEM ABILITIES (what you use):
-weapons determine the type of damage you do, and how you do it
-weapons are not 'equipped', they are placed in one of your hotkey slots
-lower tier weapons might grant the user an "item ability" upon killing enough enemies with them
 +item abilities are passive abilities that are applied to other weapons
 +weapons that give item abilities automatically have their item ability applied to them
 +item abilities might apply to specific weapon types (ex. guns do 2 bonus damage)

ACTIVATED ITEMS (how you fight):
-activated items provide you with a secondary ability to further augment your fighting style
-activated items have a mana/heat cost, and a cooldown.
-activated items might have varying cooldown lengths, but they all share the same timer.
-activited items are not 'equipped', they are placed in one of your hotkey slots

ARMOR (how you defend):
-armor is broken into 3 slots: head, body and legs
-armor is your main source of defense, which reduces the amount of damage you take from all sources.
-some armor sets have "set bonuses" that are only granted to you if you wear the entire set.
-the armor set you choose can determine your usefulness at different points in the game.
 +going for a set bonus will generally benefit you in the late game when you finally get it
 +going for a set without a bonus will give you incremental bonuses, giving you an early edge

ACCESSORIES (how you synergize):
-accessories are your primary source of stats, which increase your damage, HP/MP/HT amount, and offer a few other enhancements
-higher end accessories also often provide some sort of passive or compulsory effect that may or may not work well with other choices that you have made in the game
-you have 5 accessory slots available



===================================================================================================
JOLT'S CODE
===================================================================================================





public void chain(float damage, int origID, bool origPlayer, chained = false)
{
  if (this.aspect == 2)
  {
    int closestTarget = -1;
    int closestDist = 400;
    bool player = false;

    Vector2 origCenter = (player) ? Main.player[origID].getCenter() : Main.npc[origID].getCenter();

    Rectangle chainRect = new Rectangle((int)origCenter.X - 200, (int)origCenter.Y - 200, 400, 400);
  
    if (!chained)
    {
      if (origPlayer)
      {
        Main.player[origID].hurt((int)(damage * ((float)this.level * 0.01f))), other junk);
      }
      else
      {
        Main.npc[origID].StrikeNPC((int)(damage * ((float)this.level * 0.01f))), other junk);
      }
    }

    for (int i = 0; i < Main.npc.Length; i++)
    {
      if (Main.npc[i].active && Main.npc[i].team != Main.player[this.owner].team &&                                  Main.npc[i].canTakeDamage && !Main.npc[i].dontTakeDamage && 
          Main.npc[i].getRect().intersects(chainRect))
      {
        int distBetween = -1;
        if (origPlayer) distBetween = Main.player[origID].distTo(Main.npc[i]);
        else distBetween = Main.npc[origID].distTo(Main.npc[i]);

        if (distBetween < closestDist) 
        {
          closestTarget = i;
          closestDist = distBetween;
          player = false;
        }

      }

      if Main.player[i].active && Main.npc[i].team != Main.player[this.owner].team &&                               Main.player[i].getRect().intersects(chainRect))
      {
        int distBetween = -1;
        if (origPlayer) distBetween = Main.player[origID].distTo(Main.npc[i]);
        else distBetween = Main.npc[origID].distTo(Main.npc[i]);

        if (distBetween < closestDist) 
        {
          closestTarget = i;
          closestDist = distBetween;
          player = true
        }

      }


      if (closestTarget != -1)
      {
        if (player)
        {
          Main.player[closestTarget].hurt((int)(damage * ((float)this.level * 0.01f))), other junk);
          draw dust;
        }
        else
        {
          Main.npc[closestTarget].StrikeNPC((int)(damage * ((float)this.level * 0.01f))), other junk);
          draw dust;
        }
        if (!chained)
        {
          this.chain(damage, closestTarget, player, true)
        }
      }
    } 
  }
  return; 
}





public void lightning(damage)
{
  for (int i = 0; i < Main.player.Length; i++)
  {a
    if (Main.player[i].active && Main.player[i].team != this.team)
    {
      Main.player[i].hurt((int)(damage * ((float)this.level * 0.02f))), other junk);
    }
  }
  this.lightning--;
}


===================================================================================================
TORTE'S CODE
===================================================================================================





if (this.aspect == 0)
{
  this.addBuff(armor buff, 5, false);
  Rectangle buffRange = new Rectangle ((int)this.center().X-300, (int)this.center().Y-300, 600, 600);
  for (int i = 0; i < Main.player.Length; i++)
  {
    if (Main.player[i].active && Main.player[i].team == this.team &&                                               Main.player[i].getRect().intersects(buffRange))
    {
      Main.player[i].addBuff(armor buff, 5, false);
    }
  }
}





public void bubbleGuard()
{
  Rectangle buffRange = new Rectangle ((int)this.center().X-300, (int)this.center().Y-300, 600, 600);
  for (int i = 0; i < Main.player.Length; i++)
  {
    if (Main.player[i].active && Main.player[i].team == this.team &&                                               Main.player[i].getRect().intersects(buffRange))
    {
      Main.player[i].addBuff(bubble buff, 60*15, false);
    }
  }
}





if (buffType[i] == bubble buff)
{
  for (int i = 0; i < Main.player.Length; i++)
  {
    if (Main.player[i].active && Main.player[i].team == this.team && Main.player[i].aspect == 0)
    {
      this.statLife += (Main.player[i].level * 2);
    }
  }
}





if (buffType[i] == armor buff)
{
  for (int i = 0; i < Main.player.Length; i++)
  {
    if (Main.player[i].active && Main.player[i].team == this.team && Main.player[i].aspect == 0)
    {
      this.defense += (Main.player[i].level);
    }
  }
}


===================================================================================================
ORB'S CODE
===================================================================================================


600-401 = level
400-201 = level*2
200-101 = level*3
100-000 = level*4

REP_RANGE1 = 401
REP_RANGE2 = 201
REP_RANGE3 = 101

if (aspect == 3)
{
  Rectangle buffRange = new Rectangle ((int)this.center().X-300, (int)this.center().Y-300, 600, 600);
  for (int i = 0; i < Main.player.Length; i++)
  {
    if (Main.player[i].active && Main.player[i].team != this.team &&                                               Main.player[i].getRect().intersects(buffRange))
    {
      Main.player[i].addBuff(repulsion buff, 5, false);
    }
  }
}


this.repulsion = 0;

if (buffType[i] == repulsion buff)
{
  this.repulsion = 1;
  for (int i = 0; i < Main.player.Length; i++)
  {
    if (Main.plaayer[i].active && Main.player[i].team != this.team && Main.player[i].aspect == ORB)
    {
      int dist = this.dist(Main.player[i]);
      if (dist < REP_RANGE1) repulsion++;
      if (dist < REP_RANGE2) repulsion++;
      if (dist < REP_RANGE3) repulsion++;
      if (Main.player[i].superRepulse > 0) repulsion *= 2;
      break;
    }
  }
  this.repulsionSlow = (Main.player[i].level * this.repulsion);
}

later...

this.movespeed *= (float)this.repulsionSlow * 0.01f;



for (int i = 0; i < Main.player.Length; i++)
{
  if (Main.player[i].active && Main.player[i].team != this.team && Main.player[i].aspect == ORB)
  {
    if (Main.player[i].superRepulse > 180) //for 0.5 seconds...
    {
      //find delta-x and delta-y b/w player and enemy orb player
      Vector2 dxdy = new Vector2(Main.player[i].position.X - this.position.X, 
                                 Main.player[i].position.Y - this.position.Y); 

      //normalize delta-vector 
      //mag = sqrt((x*x)+(y*y))
      //x /= mag, y /= mag
      dxdy.normalize();

      //multiply delta-vector by pulling speed (15)
      //x *= 15, y *= 15
      dxdy *= 15;
      
      //set player's velocity to delta-vector
      this.velocity = dxdy;

      //taper off pulling speed near the end of the pull so people don't get flung around afterwards
      if (Main.player[i].superRepulse <= 185)
      {
        this.velocity /= (6 - Main.player[i].superRepulse);
      }

      //lock out player's movement controls (player can still attack)
      this.controlUp = false;
      this.controlDown = false;
      this.controlLeft = false;
      this.controlRight = false;
      this.controlJump = false;
    }
    else break;
  }
}




===================================================================================================
GILD'S CODE
===================================================================================================




in npcloot/killme...

if (killer.commonWealth && Main.netMode == 2)
{
  int wealth = this.value * ((float)killer.level * 0.02f);
  NetMessage.sendData(sendmoney, wealth, this.team);
}


in getData...

for (int i = 0; i < Main.player.Length; i++)
{
  if (Main.player[i].commonWealth && Main.player[i].active && Main.player.team == team)
  Main.player[i].money += wealth;
}


in hurt/strikenpc...

if (plunder > 0)
{
  Main.player[hitTarget].money += (int)(damage * ((float)this.level * 0.01f));
  plunder--;
}



===================================================================================================
HEX'S CODE
===================================================================================================

in hurt...

if (Crit && this.aspect == HEX)
{
  Main.player[hurt].addBuff(curse, 60, false);
}

in updateplayer...

if (curseField > 0)
{
  for (int i = 0; i < Main.player.Length; i++)
   {
     if (Main.player[i].active && Main.player[i].team != this.team && Main.player[i].aspect == HEX)
     {
        Main.player[i].addBuff(curse, 5, false);
     }
  }
  curseField--;
}



ASPECTS

-TORTE
-needs 2 buffs
-one is armor buff, other is bubble buff
-HEX
-needs 1 buff (mana regen)
+JOLT
-GILD
-needs a buff (common wealth)
-plunder should be easy to write
+ORB
-JACK
-skipping him
+AGNI

applyActive()
{
  Rectangle auraRange = new Rectangle((int)this.center().X - 300, (int)this.center().Y - 300, 600, 600)
  if (aspect == TORTE)
  {
    for (int i = 0; i < Main.player.Length; i++)
    {
      if (Main.player[i].active && !Main.player[i].dead && Main.player[i].team == this.team &&           Main.player[i].getRect().intersects(auraRange))
      {
        Main.player[i].addBuff(bubble, (level*60), false);
      }
    }
  }
  if (aspect == HEX)
  {
    this.curseField = 180;
    this.addBuff (mana regen, 180, false);
  }
  if (aspect == JOLT)
  {
    this.wrath = 5;
  }
  if (aspect == GILD)
  {
    this.plunder = 5;
  }
  if (aspect == ORB)
  {
    this.superRepulse = 210;
  }
  if (aspect == JACK)
  {
    for (int i = 0; i < Main.player.Length; i++)
    {
      if (Main.player[i].active && !Main.player[i].dead && Main.player[i].team != this.team)
      {
        Main.player[i].addBuff(burning, (this.level*30), false);
      }
    }
  }
  if (aspect == AGNI)
  {
    this.heatWave = !this.heatWave;
  }
  this.abilityCD = ABILITY_CD[this.aspect];
  playsound(this.aspect);
  drawdust(this.aspect);
  if (Main.netMode == 1) NetMessage.sendData(75, -1, -1, "", this.whoami);
}


temp jack (until the next game)

passive (quick and nimble): nearby allies receive +(level/2) jump height, +(level*2)% movespeed

active (Candlestick): All enemy heroes are inflicted with "burning" for (level/2) seconds.  Burning greatly reduces movement speed, and deals heavy damage over time. 



concept: corrupted aspects

-give a LARGE boost to one stat, at the cost of lowering the other 2 stats slightly
-give a passive ability that has a downside and an upside that almost counteracts it
-active ability can make downside of the passive almost feel like an upside

NECRO

+(4 + (level*2)) intelligence, -(1 + level) agility/strength

passive (Dark Contract): You lose (level)% of your health per second, and gain (level*2)% lifesteal on all attacks

active (Violent rebirth): When you die and this ability is not on cooldown, it is automatically used.  Instead of dying, you are reset to (level*9)% health and mana, and do (level*5) damage to everything nearby.

LODE

+(4 + (level*2)) strength, -(1 + level) agility/intelligence

passive (heavyweight): you lose (level*2)% movespeed, and you take (level * 2)% less damage

active (stone form): become immobile and reduce incoming damage by (level*9)% for 3 seconds.  If an enemy attacks you during this time, you summon a boulder that deals (level*5) damage

IMP

+(4 + (level*2)) agility, -(1 + level) strength/intelligence

passive (minimize): you take (level*5)% increased damage, but have a 1/(10-(level/2)) chance to evade all attacks

active (vanish): disappear for 5 seconds or until you attack again.  While invisible, you evade all attacks.  Your first attack out of stealth confuses targets for (level/3) seconds


(x-Y: a Y that gets all X item abilities)

boomerang-spear: Celestial Dagger

spear-sword : death sickle

staff-missile: King's Scepter

gun-bow: crossbow

